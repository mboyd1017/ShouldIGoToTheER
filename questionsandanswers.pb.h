// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: questionsandanswers.proto

#ifndef PROTOBUF_questionsandanswers_2eproto__INCLUDED
#define PROTOBUF_questionsandanswers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SERQuestions {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_questionsandanswers_2eproto();
void protobuf_AssignDesc_questionsandanswers_2eproto();
void protobuf_ShutdownFile_questionsandanswers_2eproto();

class Question;

// ===================================================================

class Question : public ::google::protobuf::Message {
 public:
  Question();
  virtual ~Question();

  Question(const Question& from);

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Question& default_instance();

  void Swap(Question* other);

  // implements Message ----------------------------------------------

  Question* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string questionText = 1;
  inline bool has_questiontext() const;
  inline void clear_questiontext();
  static const int kQuestionTextFieldNumber = 1;
  inline const ::std::string& questiontext() const;
  inline void set_questiontext(const ::std::string& value);
  inline void set_questiontext(const char* value);
  inline void set_questiontext(const char* value, size_t size);
  inline ::std::string* mutable_questiontext();
  inline ::std::string* release_questiontext();
  inline void set_allocated_questiontext(::std::string* questiontext);

  // repeated string answers = 2;
  inline int answers_size() const;
  inline void clear_answers();
  static const int kAnswersFieldNumber = 2;
  inline const ::std::string& answers(int index) const;
  inline ::std::string* mutable_answers(int index);
  inline void set_answers(int index, const ::std::string& value);
  inline void set_answers(int index, const char* value);
  inline void set_answers(int index, const char* value, size_t size);
  inline ::std::string* add_answers();
  inline void add_answers(const ::std::string& value);
  inline void add_answers(const char* value);
  inline void add_answers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& answers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_answers();

  // @@protoc_insertion_point(class_scope:SERQuestions.Question)
 private:
  inline void set_has_questiontext();
  inline void clear_has_questiontext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* questiontext_;
  ::google::protobuf::RepeatedPtrField< ::std::string> answers_;
  friend void  protobuf_AddDesc_questionsandanswers_2eproto();
  friend void protobuf_AssignDesc_questionsandanswers_2eproto();
  friend void protobuf_ShutdownFile_questionsandanswers_2eproto();

  void InitAsDefaultInstance();
  static Question* default_instance_;
};
// ===================================================================


// ===================================================================

// Question

// required string questionText = 1;
inline bool Question::has_questiontext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Question::set_has_questiontext() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Question::clear_has_questiontext() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Question::clear_questiontext() {
  if (questiontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questiontext_->clear();
  }
  clear_has_questiontext();
}
inline const ::std::string& Question::questiontext() const {
  // @@protoc_insertion_point(field_get:SERQuestions.Question.questionText)
  return *questiontext_;
}
inline void Question::set_questiontext(const ::std::string& value) {
  set_has_questiontext();
  if (questiontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questiontext_ = new ::std::string;
  }
  questiontext_->assign(value);
  // @@protoc_insertion_point(field_set:SERQuestions.Question.questionText)
}
inline void Question::set_questiontext(const char* value) {
  set_has_questiontext();
  if (questiontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questiontext_ = new ::std::string;
  }
  questiontext_->assign(value);
  // @@protoc_insertion_point(field_set_char:SERQuestions.Question.questionText)
}
inline void Question::set_questiontext(const char* value, size_t size) {
  set_has_questiontext();
  if (questiontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questiontext_ = new ::std::string;
  }
  questiontext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SERQuestions.Question.questionText)
}
inline ::std::string* Question::mutable_questiontext() {
  set_has_questiontext();
  if (questiontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questiontext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SERQuestions.Question.questionText)
  return questiontext_;
}
inline ::std::string* Question::release_questiontext() {
  clear_has_questiontext();
  if (questiontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = questiontext_;
    questiontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Question::set_allocated_questiontext(::std::string* questiontext) {
  if (questiontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete questiontext_;
  }
  if (questiontext) {
    set_has_questiontext();
    questiontext_ = questiontext;
  } else {
    clear_has_questiontext();
    questiontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SERQuestions.Question.questionText)
}

// repeated string answers = 2;
inline int Question::answers_size() const {
  return answers_.size();
}
inline void Question::clear_answers() {
  answers_.Clear();
}
inline const ::std::string& Question::answers(int index) const {
  // @@protoc_insertion_point(field_get:SERQuestions.Question.answers)
  return answers_.Get(index);
}
inline ::std::string* Question::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:SERQuestions.Question.answers)
  return answers_.Mutable(index);
}
inline void Question::set_answers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SERQuestions.Question.answers)
  answers_.Mutable(index)->assign(value);
}
inline void Question::set_answers(int index, const char* value) {
  answers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SERQuestions.Question.answers)
}
inline void Question::set_answers(int index, const char* value, size_t size) {
  answers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SERQuestions.Question.answers)
}
inline ::std::string* Question::add_answers() {
  return answers_.Add();
}
inline void Question::add_answers(const ::std::string& value) {
  answers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SERQuestions.Question.answers)
}
inline void Question::add_answers(const char* value) {
  answers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SERQuestions.Question.answers)
}
inline void Question::add_answers(const char* value, size_t size) {
  answers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SERQuestions.Question.answers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Question::answers() const {
  // @@protoc_insertion_point(field_list:SERQuestions.Question.answers)
  return answers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Question::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:SERQuestions.Question.answers)
  return &answers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SERQuestions

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_questionsandanswers_2eproto__INCLUDED
